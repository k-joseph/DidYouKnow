maven commands
mvn clean install
mvn clean install -DskipTests
mvn test -Dtest=Classname
mvn test -Dtest=ConceptTest
mvn jetty:run
export MAVEN_OPTS="-noverify -javaagent:PATHTOJREBELJAR/jrebel.jar"
mvn jetty:run -P jrebel
mvn surefire-report:report
mvn javadoc:jar
mvn javadoc:aggregate-jar
mvn release:branch -DbranchName= -Dusername= -Dpassword=


whole summerly;
  Download and install Git
  git config --global user.name "Your Name"
  git config --global user.email tirengarfio@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirengarfio/tirengarfio.git
  git push origin master


git remote add upstream https://github.com/openmrs/openmrs-core.git
 git branch TRUNK-3814

git checkout TRUNK-3814

code>>>>


git commit -m "Missing Validators for relationship_type-TRUNK-3814"


 git push origin TRUNK-3814


ssh-keygen -t rsa -C "joseph.kaweesi2012@gmail.com"

$ git checkout experiment
$ git rebase master
$ git rebase --onto master server client
$ git checkout master
$ git merge client
$ git rebase master server
$ git checkout master
$ git merge server
$ git branch -d client
$ git branch -d server



git pull --rebase upstream master
git pull upstream master

ssh-keygen -t rsa -C "joseph.kaweesi2012@gmail.com"


refresh

git fetch
git remote prune origin

git branch -D TRUNK-3814

git push origin :TRUNK-3814

git reset --hard HEAD~1       delete the 1 last commits


The last 4 commits would be much happier if they were wrapped up together, so let’s do just that through interactive rebasing:
	$ git rebase -i HEAD~4
So, this has been a relatively painless so far. If you run into conflicts during the rebase, they’re usually quite easy to resolve and Git leads you through as much as possible. The basics of this is fix the conflict in question, 
	$ git add the file, 
and then 
	$ git rebase --continue
 will resume the process. Of course, doing a 
	$ git rebase --abort
 will bring you back to your previous state if you want. If for some reason you’ve lost a commit in the rebase, you can use the reflog to get it back.
 doing this will list for you all the module tags:      
	$ git tag
 then you just do:
	$ git checkout tagname

 
git filter-branch --tree-filter 'rm -rf vendor/gems' HEAD

git filter-branch --tree-filter 'rm -rf vendor/gems' 7b3072c..HEAD

git filter-branch -f --tree-filter 'rm -rf vendor/gems' HEAD

rm -rf .git/refs/original/

git filter-branch --tree-filter 'rm filename' HEAD

git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD

git remote set-url origin git@github.com:k-joseph/openmrs-module........

git push origin master --force
__________________________________________________________________________________
<khaase> k-joseph_: travis takes the projects' code, builds it and runs it's tests
<khaase> k-joseph_: then reports back if the tests pass or not_____________________________________________________________________________________________
___________________________  links:  ______________________________________________________________________

http://snag.gy/
http://jk.gs/git-stash.html
http://www.brandonsavage.net/five-ways-to-write-better-code/

TASKS AND SUBTASKS________________________________________________
https://tickets.openmrs.org/secure/ReleaseNote.jspa?projectId=10000&version=12565
https://wiki.openmrs.org/display/docs/Bundling+Modules


https://tickets.openmrs.org/secure/IssueNavigator.jspa?mode=hide&requestId=12655     from wyclif
https://wiki.openmrs.org/display/docs/Tickets											all links to tickets
